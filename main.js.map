{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n\\n<div [ngSwitch]=\\\"color\\\">\\n\\n<div  *ngSwitchCase=\\\"'red'\\\" class=\\\"container center_div\\\" style=\\\"text-align:center\\\">\\n  <form  #userform=\\\"ngForm\\\" >\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">UserName</label>\\n      <input type=\\\"email\\\" class=\\\"form-control\\\" name=\\\"email\\\" ngModel>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"pwd\\\">Password</label>\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"pwd\\\" ngModel>\\n    </div>\\n    <p *ngIf=\\\"dis\\\" style=\\\"color: red;\\\">UserName and Password not matched</p>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" (click)=\\\"myFunction(userform.value)\\\">Submit</button>\\n  </form>\\n</div>\\n\\n<div *ngSwitchCase=\\\"'blue'\\\" class=\\\"container center_div\\\" style=\\\"text-align:center\\\">\\n <div style=\\\"margin-top: 50px;\\\">\\n  <label>Create t2.nano EC2 server with 10 GB of EBS volume</label>\\n  <button type=\\\"submit\\\"   [disabled]=\\\"contractTypeValid!='novalue'\\\" class=\\\"btn btn-success\\\" (click)=\\\"myFunction1()\\\">create</button>\\n  <button type=\\\"button\\\"  *ngIf=\\\" this.dis_id!='0'\\\"  class=\\\"btn btn-success\\\" (click)=\\\"myFunction2()\\\">Back To Login</button>\\n  <p *ngIf=\\\"dis_id!='0'\\\" style=\\\"color: red;\\\">Your t2 nano ec2 instance is creatred with 10Gb of ebs volume the instance id is {{dis_id}} </p>\\n</div>\\n</div>\\n\\n\\n</div>\\n\\n\\n\\n\\n\\n\\n\\n\"","import { Component } from '@angular/core';\nimport {AppService} from './app.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ec2';\n  dis=false;\n  public color=\"red\"\n  dis_id=\"0\"\n  contractTypeValid=\"novalue\"\n  constructor(private _appserive:AppService){}\n\n\n\n  myFunction(value){\n   //console.log(value);\n    \n   this._appserive.handleapi(value).subscribe(res=>{\n   //  console.log(res);\n    let ary:any=res;\n    console.log(ary);\n    if(ary.length > 0){\n      this.dis=false\n      this.color=\"blue\"\n    }else{\n      this.dis=true\n    }\n\n    // console.log(res);\n   })\n  //  .subscribe((d)=>{\n\n  //  })\n\n  }\n\n  myFunction1(){\n    this._appserive.handleapi2().subscribe(res=>{\n      let ids:any=res;\n      this.dis_id=ids\n      this.contractTypeValid=\"1\"\n    // console.log(this.dis_id);\n     })\n  }\n\n  myFunction2(){\n    this.dis=false;\n    this.color=\"red\"\n    this.contractTypeValid=\"novalue\"\n    this.dis_id=\"0\"\n  }\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms'\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport {AppService} from './app.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [AppService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n\n  //https://www.w3schools.com/bootstrap/\n  private _url=\"http://13.233.216.42:3000/api/post/test_data\";\n  constructor(private http:HttpClient) { }\n  private _Url=\"http://13.233.216.42:3000/api/create/instance\";\n\n  handleapi(value){\n    let obj={\n      user_name:value.email,\n      password:value.pwd\n    }\n    console.log(obj);\n    return this.http.post(this._url,obj)\n  }\n\n  handleapi2(){\n    return this.http.get(this._Url)\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}